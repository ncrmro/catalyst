name: Test Web

on:
  push:
    branches:
      - main
    paths:
      - 'web/**'
      - '.github/actions/build-container/**'
  pull_request:
    paths:
      - 'web/**'
      - '.github/actions/build-container/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-web:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './web/package-lock.json'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Build Next.js
        run: npm run build

  integration:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: catalyst
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - run: cp .env.example .env

      - name: Create Kind cluster
        uses: helm/kind-action@v1.10.0
        with:
          cluster_name: integration-test-cluster
          wait: 60s

      - name: Export kubeconfig for integration tests
        run: |
          # Export base64 encoded kubeconfig for integration tests
          export KUBECONFIG_PRIMARY=$(kubectl config view --raw -o json | base64 -w 0)
          echo "KUBECONFIG_PRIMARY=$KUBECONFIG_PRIMARY" >> $GITHUB_ENV
          echo "Kubeconfig exported for integration tests"
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './web/package-lock.json'
      
      - name: Install dependencies
        run: npm ci

      - run: npm run db:migrate

      - name: Run integration tests
        run: npm test
        env:
          NODE_ENV: test
          KUBECONFIG_PRIMARY: ${{ env.KUBECONFIG_PRIMARY }}

  e2e:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: catalyst
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - run: cp .env.example .env

      - name: Create Kind cluster
        uses: helm/kind-action@v1.10.0
        with:
          cluster_name: e2e-test-cluster
          wait: 60s

      - name: Export kubeconfig for E2E tests
        run: |
          # Export base64 encoded kubeconfig for E2E tests
          export KUBECONFIG_PRIMARY=$(kubectl config view --raw -o json | base64 -w 0)
          echo "KUBECONFIG_PRIMARY=$KUBECONFIG_PRIMARY" >> $GITHUB_ENV
          echo "Kubeconfig exported for E2E tests"
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './web/package-lock.json'
      
      - name: Install dependencies
        run: npm ci

      - name: Get Playwright version
        id: playwright-version
        run: echo "version=$(node -p "require('./package.json').devDependencies['@playwright/test'].replace('^', '')")" >> $GITHUB_OUTPUT

      - name: Cache playwright binaries
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps
      
      - run: npm run db:migrate
      
      - name: Run Playwright tests
        run: npm run test:e2e
        env:
          KUBECONFIG_PRIMARY: ${{ env.KUBECONFIG_PRIMARY }}
      
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: ./web/playwright-report/
          retention-days: 30
      
      - name: Upload test screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-screenshots
          path: ./web/test-results/**/test-failed-*.png
          retention-days: 30
      
      - name: Upload test videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-videos
          path: ./web/test-results/**/video.webm
          retention-days: 30

  build-container:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    outputs:
      image-tags: ${{ steps.build.outputs.image }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and push container
        id: build
        uses: ./.github/actions/build-container
        with:
          registry: ghcr.io
          image: ${{ github.repository }}/web
          platforms: 'linux/amd64'

  preview-environment:
    needs: build-container
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Kind cluster
        uses: helm/kind-action@v1.10.0
        with:
          cluster_name: preview-cluster
          wait: 60s

      - name: Export kubeconfig for preview environment
        run: |
          # Export base64 encoded kubeconfig for preview environment
          export KUBECONFIG_PRIMARY=$(kubectl config view --raw -o json | base64 -w 0)
          echo "KUBECONFIG_PRIMARY=$KUBECONFIG_PRIMARY" >> $GITHUB_ENV
          echo "Kubeconfig exported for preview environment"

      - name: Set PR tag
        run: |
          echo "PR_TAG=pr-${{ github.event.number }}" >> $GITHUB_ENV
          echo "NAMESPACE=preview-pr-${{ github.event.number }}" >> $GITHUB_ENV

      - name: Create preview namespace
        run: |
          echo "Creating namespace: ${{ env.NAMESPACE }}"
          kubectl create namespace ${{ env.NAMESPACE }}
          echo "Namespace created successfully"
          kubectl get namespace ${{ env.NAMESPACE }}

      - name: Debug - Pre-deployment state  
        run: |
          echo "=== PRE-DEPLOYMENT DEBUG INFO ==="
          echo "Image tags from build: ${{ needs.build-container.outputs.image-tags }}"
          echo "Image digest: ${{ needs.build-container.outputs.image-digest }}"
          echo "PR number: ${{ github.event.number }}"
          echo "Namespace: ${{ env.NAMESPACE }}"
          echo "PR tag: ${{ env.PR_TAG }}"
          echo ""
          echo "=== CLUSTER STATE BEFORE DEPLOYMENT ==="
          kubectl get nodes
          kubectl get namespaces
          echo ""
          echo "=== HELM CHARTS AVAILABLE ==="
          ls -la ./charts/
          ls -la ./charts/nextjs/

      - name: Deploy to Kind cluster using Helm chart
        run: |
          # Extract the pr tag from the built image
          FULL_IMAGE_TAG=$(echo '${{ needs.build-container.outputs.image-tags }}' | grep 'pr-' | head -n 1)
          if [ -z "$FULL_IMAGE_TAG" ]; then
            echo "No PR tag found in built images, using SHA tag as fallback"
            FULL_IMAGE_TAG=$(echo '${{ needs.build-container.outputs.image-tags }}' | head -n 1)
          fi
          
          echo "Deploying image: $FULL_IMAGE_TAG"
          echo "To namespace: ${{ env.NAMESPACE }}"
          
          # Extract repository and tag from the full image tag
          IMAGE_REPO=$(echo "$FULL_IMAGE_TAG" | cut -d':' -f1)
          IMAGE_TAG=$(echo "$FULL_IMAGE_TAG" | cut -d':' -f2)
          
          echo "Image repository: $IMAGE_REPO"
          echo "Image tag: $IMAGE_TAG"
          
          # Verify namespace exists
          kubectl get namespace ${{ env.NAMESPACE }}
          
          # Deploy using the nextjs Helm chart
          helm install web-preview-${{ github.event.number }} ./charts/nextjs \
            --namespace ${{ env.NAMESPACE }} \
            --set image.repository="$IMAGE_REPO" \
            --set image.tag="$IMAGE_TAG" \
            --set image.pullPolicy=IfNotPresent \
            --wait --timeout=300s

      - name: Verify deployment
        run: |
          kubectl wait --for=condition=available --timeout=300s deployment/web-preview-${{ github.event.number }}-nextjs -n ${{ env.NAMESPACE }}
          helm test web-preview-${{ github.event.number }} --namespace ${{ env.NAMESPACE }}

      # Debug steps that run only on failure
      - name: Debug - Cluster information
        if: failure()
        run: |
          echo "=== CLUSTER INFORMATION ===" | tee /tmp/debug-cluster.log
          kubectl cluster-info | tee -a /tmp/debug-cluster.log
          echo "" | tee -a /tmp/debug-cluster.log
          echo "=== NODE STATUS ===" | tee -a /tmp/debug-cluster.log
          kubectl get nodes -o wide | tee -a /tmp/debug-cluster.log
          echo "" | tee -a /tmp/debug-cluster.log
          echo "=== ALL NAMESPACES ===" | tee -a /tmp/debug-cluster.log
          kubectl get namespaces | tee -a /tmp/debug-cluster.log

      - name: Debug - Preview namespace resources
        if: failure()
        run: |
          echo "=== RESOURCES IN ${{ env.NAMESPACE }} NAMESPACE ===" | tee /tmp/debug-namespace.log
          kubectl get all -n ${{ env.NAMESPACE }} -o wide 2>&1 | tee -a /tmp/debug-namespace.log || echo "Namespace may not exist" | tee -a /tmp/debug-namespace.log
          echo "" | tee -a /tmp/debug-namespace.log
          echo "=== EVENTS IN ${{ env.NAMESPACE }} NAMESPACE ===" | tee -a /tmp/debug-namespace.log
          kubectl get events -n ${{ env.NAMESPACE }} --sort-by='.lastTimestamp' 2>&1 | tee -a /tmp/debug-namespace.log || echo "No events found" | tee -a /tmp/debug-namespace.log

      - name: Debug - Pod descriptions and logs
        if: failure()
        run: |
          echo "=== POD DESCRIPTIONS ===" | tee /tmp/debug-pods.log
          kubectl describe pods -n ${{ env.NAMESPACE }} 2>&1 | tee -a /tmp/debug-pods.log || echo "No pods found" | tee -a /tmp/debug-pods.log
          echo "" | tee -a /tmp/debug-pods.log
          echo "=== POD LOGS ===" | tee -a /tmp/debug-pods.log
          for pod in $(kubectl get pods -n ${{ env.NAMESPACE }} -o jsonpath='{.items[*].metadata.name}' 2>/dev/null || echo ""); do
            if [ ! -z "$pod" ]; then
              echo "--- Logs for pod: $pod ---" | tee -a /tmp/debug-pods.log
              kubectl logs $pod -n ${{ env.NAMESPACE }} --tail=100 2>&1 | tee -a /tmp/debug-pods.log || echo "Could not get logs for $pod" | tee -a /tmp/debug-pods.log
              echo "" | tee -a /tmp/debug-pods.log
            fi
          done

      - name: Debug - Helm deployment status
        if: failure()
        run: |
          echo "=== HELM RELEASES ===" | tee /tmp/debug-helm.log
          helm list --all-namespaces | tee -a /tmp/debug-helm.log
          echo "" | tee -a /tmp/debug-helm.log
          echo "=== HELM STATUS ===" | tee -a /tmp/debug-helm.log
          helm status web-preview-${{ github.event.number }} --namespace ${{ env.NAMESPACE }} 2>&1 | tee -a /tmp/debug-helm.log || echo "Helm release not found" | tee -a /tmp/debug-helm.log
          echo "" | tee -a /tmp/debug-helm.log
          echo "=== HELM HISTORY ===" | tee -a /tmp/debug-helm.log
          helm history web-preview-${{ github.event.number }} --namespace ${{ env.NAMESPACE }} 2>&1 | tee -a /tmp/debug-helm.log || echo "No history found" | tee -a /tmp/debug-helm.log

      - name: Debug - Deployment and service details
        if: failure()
        run: |
          echo "=== DEPLOYMENT DETAILS ===" | tee /tmp/debug-deployment.log
          kubectl describe deployment/web-preview-${{ github.event.number }}-nextjs -n ${{ env.NAMESPACE }} 2>&1 | tee -a /tmp/debug-deployment.log || echo "Deployment not found" | tee -a /tmp/debug-deployment.log
          echo "" | tee -a /tmp/debug-deployment.log
          echo "=== SERVICE DETAILS ===" | tee -a /tmp/debug-deployment.log
          kubectl describe service -n ${{ env.NAMESPACE }} 2>&1 | tee -a /tmp/debug-deployment.log || echo "No services found" | tee -a /tmp/debug-deployment.log
          echo "" | tee -a /tmp/debug-deployment.log
          echo "=== INGRESS DETAILS ===" | tee -a /tmp/debug-deployment.log
          kubectl describe ingress -n ${{ env.NAMESPACE }} 2>&1 | tee -a /tmp/debug-deployment.log || echo "No ingress found" | tee -a /tmp/debug-deployment.log

      - name: Debug - Docker and Kind specific info
        if: failure()
        run: |
          echo "=== KIND CLUSTER LOGS ===" | tee /tmp/debug-docker.log
          kind get clusters | tee -a /tmp/debug-docker.log
          echo "" | tee -a /tmp/debug-docker.log
          echo "=== DOCKER CONTAINERS ===" | tee -a /tmp/debug-docker.log
          docker ps -a | tee -a /tmp/debug-docker.log
          echo "" | tee -a /tmp/debug-docker.log
          echo "=== KIND CLUSTER CONFIG ===" | tee -a /tmp/debug-docker.log
          kubectl config get-contexts | tee -a /tmp/debug-docker.log

      - name: Upload debug logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: preview-env-debug-logs-pr-${{ github.event.number }}
          path: |
            /tmp/debug-*.log
          retention-days: 7 
