name: Kind Cluster Testing

"on":
  pull_request:
    branches: [main, master]
    paths:
      - '.github/workflows/test.kind.yml'
  workflow_dispatch:

jobs:
  kind-test:
    name: Test with Kind Cluster
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Kind cluster
        uses: helm/kind-action@v1.10.0
        with:
          cluster_name: test-cluster
          wait: 60s

      - name: Verify cluster with kubectl
        run: |
          # Verify that kubectl can communicate with the cluster
          echo "Checking cluster info..."
          kubectl cluster-info

          echo "Checking nodes..."
          kubectl get nodes

          echo "Checking namespaces..."
          kubectl get namespaces

          echo "Checking pods in kube-system..."
          kubectl get pods -n kube-system

          echo "Cluster verification completed successfully!"

      - name: Install in-cluster container registry
        run: |
          echo "Installing in-cluster container registry..."
          
          # Create a simple registry deployment
          kubectl run registry --image=registry:2.8.3 --port=5000
          kubectl expose pod registry --port=5000 --target-port=5000
          
          # Wait for registry to be ready
          kubectl wait --for=condition=ready pod/registry --timeout=120s
          
          echo "Registry installed successfully!"
          kubectl get pods,svc | grep registry
          
          # Set up port forwarding for registry access in background
          kubectl port-forward pod/registry 5000:5000 &
          sleep 5
          
          # Test registry connectivity
          curl -f "http://localhost:5000/v2/" && echo "Registry is accessible!"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push web application to in-cluster registry
        run: |
          echo "Building and pushing web/Dockerfile to in-cluster registry..."
          
          # Build and push production image to the in-cluster registry
          docker build \
            --target runner \
            --tag localhost:5000/catalyst-web:test \
            --file web/Dockerfile \
            web/
          
          # Build and push development image for unit tests
          docker build \
            --target development \
            --tag localhost:5000/catalyst-web:development \
            --file web/Dockerfile \
            web/
          
          # Push both images to the registry
          docker push localhost:5000/catalyst-web:test
          docker push localhost:5000/catalyst-web:development
          
          echo "Web application build and push completed successfully!"
          
          # Verify the images were pushed successfully
          echo "Verifying image push to registry..."
          curl -f "http://localhost:5000/v2/catalyst-web/tags/list" && \
            echo "Images successfully pushed and verified in registry!" || \
            echo "Warning: Could not verify images in registry, but push command succeeded"

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.16.1'

      - name: Deploy NextJS chart with unit tests enabled
        run: |
          echo "Deploying NextJS Helm chart with unit tests enabled..."
          
          # Deploy the chart with unit tests enabled
          helm install catalyst-test charts/nextjs \
            --set image.repository=localhost:5000/catalyst-web \
            --set image.tag=test \
            --set developmentImage.repository=localhost:5000/catalyst-web \
            --set developmentImage.tag=development \
            --set unitTests.enabled=true \
            --set postgresql.enabled=false \
            --wait \
            --timeout=5m
          
          echo "Chart deployed successfully!"
          
          # Show deployment status
          kubectl get all -l app.kubernetes.io/instance=catalyst-test

      - name: Run Helm unit tests
        run: |
          echo "Running Helm unit tests..."
          
          # Run only unit tests using filter
          helm test catalyst-test --filter name=*unit* --logs
          
          echo "Unit tests completed successfully!"

      - name: Show test results and cleanup
        if: always()
        run: |
          echo "Showing test pod logs and status..."
          
          # Show unit test pod logs
          kubectl logs -l app.kubernetes.io/instance=catalyst-test,helm.sh/chart=nextjs || echo "No unit test pods found"
          
          # Show all test pods
          kubectl get pods -l app.kubernetes.io/instance=catalyst-test || echo "No test pods found"
          
          # Cleanup the release
          helm uninstall catalyst-test || echo "Release already removed"

      - name: Test basic kubectl operations
        run: |
          # Create a test namespace
          kubectl create namespace test-namespace

          # Verify the namespace was created
          kubectl get namespace test-namespace

          # Create a simple pod
          kubectl run test-pod --image=nginx:alpine \
            --restart=Never -n test-namespace

          # Wait for pod to be ready
          kubectl wait --for=condition=Ready pod/test-pod \
            -n test-namespace --timeout=60s

          # Verify the pod is running
          kubectl get pods -n test-namespace

          # Clean up
          kubectl delete namespace test-namespace

          echo "Basic kubectl operations test completed successfully!"
