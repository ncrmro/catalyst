# Auth.js Configuration
# You need to add this in your .env.local file

# NextAuth Secret (generate a random secret)
AUTH_SECRET=txPLQWs8toKE251TIWiGS6abI4dJafPA5Kd/DTxou6q5

# GitHub App Configuration
# For GitHub App integration (separate from OAuth above)
# Get these values from your GitHub App settings
GITHUB_APP_ID=your_app_id_here
GITHUB_APP_PRIVATE_KEY="-----BEGIN RSA PRIVATE KEY-----\nstub\n-----END RSA PRIVATE KEY-----"

# GitHub App OAuth Credentials (for user authentication via Auth.js)
# Get these from your GitHub App's OAuth credentials section
GITHUB_APP_CLIENT_ID=your_github_app_client_id_here
GITHUB_APP_CLIENT_SECRET=your_github_app_client_secret_here

# GitHub Webhook Secret (for validating webhook signatures)
# Generate a secure random secret for your GitHub App webhook
GITHUB_WEBHOOK_SECRET=your_webhook_secret_here
# Used to simulate prod where user has access token from Oauth/Github App follow
# GITHUB_PAT=

# GitHub Container Registry (GHCR) Personal Access Token (LOCAL TESTING ONLY)
# Classic Personal Access Token with 'write:packages' scope for pushing/pulling from GHCR
# Generate at: https://github.com/settings/tokens (select "Tokens (classic)")
# Required for PR pod deployments that push to GHCR during local spike testing
# WARNING: Only use for local development - production should use GitHub App tokens
#GITHUB_GHCR_PAT=
# Token Encryption Key (64-character hex string)
# Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
TOKEN_ENCRYPTION_KEY=your_64_character_hex_encryption_key_here

# AI Provider Configuration
# Set these API keys to use AI-powered features like periodic reports
# OPENAI_API_KEY=your_openai_api_key_here
# ANTHROPIC_API_KEY=your_anthropic_api_key_here

# Feature Flags
# In development: feature flags default to enabled unless set to "0"
# In production: feature flags are only enabled when set to "1"
# Set FF_USER_CLUSTERS=1 to enable the clusters page, or FF_USER_CLUSTERS=0 to disable in development
# FF_USER_CLUSTERS=1

# Service Port Configuration
# Database port (PostgreSQL) - for external access from host
DB_PORT=5432

# Application port (Next.js)
APP_PORT=3000

# Database Configuration
# For local development with Docker Compose
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/catalyst

# Base64 JSON encoded kubeconfig
#KUBECONFIG_PRIMARY=
